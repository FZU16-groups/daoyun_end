<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.pcs.dao.OauthQQMapper">
    <resultMap id="BaseResultMap" type="com.pcs.pojo.AuthqqDTO">
        <id column="Id" jdbcType="INTEGER" property="aId" />
        <result column="UserId" jdbcType="INTEGER" property="userId" />
        <result column="OpenId" jdbcType="VARCHAR" property="openId" />
        <result column="AccessToken" jdbcType="VARCHAR" property="accessToken" />
        <result column="State" jdbcType="INTEGER" property="state" />
    </resultMap>
    <sql id="Base_Column_List">
        Id, UserId, OpenId, AccessToken, State
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer"
            resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from oauthqq
        where Id = #{aId,jdbcType=INTEGER}
    </select>
    <select id="selectByUserId" parameterType="java.lang.String"
            resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from oauthqq
        where UserId = #{userId,jdbcType=INTEGER}
    </select>
    <select id="selectByOpenId" parameterType="java.lang.String"
            resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from oauthqq
        where OpenId = #{openId,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from oauthqq
        where Id = #{aId,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.pcs.pojo.AuthqqDTO">
        insert into oauthqq (Id,
                          UserId, OpenId,
                          AccessToken,State)
        values
        (#{aId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER},
         #{openId,jdbcType=VARCHAR},
         #{accessToken,jdbcType=VARCHAR},
         #{state,jdbcType=INTEGER})
    </insert>
    <insert id="insertSelective" parameterType="com.pcs.pojo.AuthqqDTO">
        insert into oauthqq
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="aId != null">
                Id,
            </if>
            <if test="userId != null">
                UserId,
            </if>
            <if test="openId != null">
                OpenId,
            </if>
            <if test="accessToken != null">
                AccessToken,
            </if>
            <if test="state != null">
                State,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="aId != null">
                #{aId,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="openId != null">
                #{openId,jdbcType=VARCHAR},
            </if>
            <if test="accessToken != null">
                #{accessToken,jdbcType=VARCHAR},
            </if>
            <if test="state != null">
                #{state,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.pcs.pojo.AuthqqDTO">
        update oauthqq
        <set>
            <if test="userId != null">
                UserId = #{userId,jdbcType=INTEGER},
            </if>
            <if test="openId != null">
                OpenId = #{openId,jdbcType=VARCHAR},
            </if>
            <if test="accessToken != null">
                AccessToken = #{accessToken,jdbcType=VARCHAR},
            </if>
            <if test="state != null">
                State = #{state,jdbcType=INTEGER},
            </if>
        </set>
        where Id = #{aId,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.pcs.pojo.AuthqqDTO">
        update oauthqq
        set
            UserId = #{userId,jdbcType=INTEGER}
            OpenId = #{openId,jdbcType=VARCHAR},
            AccessToken =
                #{accessToken,jdbcType=VARCHAR},
            State = #{state,jdbcType=INTEGER}
        where Id = #{aId,jdbcType=INTEGER}
    </update>
</mapper>
